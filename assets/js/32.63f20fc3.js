(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{334:function(s,t,a){s.exports=a.p+"assets/img/image-20230525150326866.75760257.png"},335:function(s,t,a){s.exports=a.p+"assets/img/image-20230525150346395.abd43127.png"},409:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"基于-redis-实现分布式锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于-redis-实现分布式锁"}},[s._v("#")]),s._v(" 基于 Redis 实现分布式锁")]),s._v(" "),t("p",[s._v("Redis单线程非常适合实现分布式锁。")]),s._v(" "),t("p",[s._v("基本原理：利用setnx的互斥性；利用ex避免死锁")]),s._v(" "),t("h2",{attrs:{id:"一、加锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、加锁"}},[s._v("#")]),s._v(" 一、加锁")]),s._v(" "),t("h3",{attrs:{id:"获取锁-setnx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取锁-setnx"}},[s._v("#")]),s._v(" 获取锁：setnx")]),s._v(" "),t("p",[s._v("setnx，set if not exists，key不存在才生效。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果 key 已经存在，命令无效 ，返回执行结果为 0。")]),s._v("\nsetnx "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"解决死锁问题-ex"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决死锁问题-ex"}},[s._v("#")]),s._v(" 解决死锁问题：EX")]),s._v(" "),t("p",[s._v("setnx执行完毕，但获取锁的线程异常了，会导致分布式锁的死锁问题，最简单的解决方案是：设置个过期时间。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("expire "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("过期时间，单位秒"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("过期时间相当于一个兜底的保证。但是EX也给我们带来了两个麻烦：")]),s._v(" "),t("h2",{attrs:{id:"ex带来的两个问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ex带来的两个问题"}},[s._v("#")]),s._v(" EX带来的两个问题")]),s._v(" "),t("h3",{attrs:{id:"_1、两条命令-如何原子加锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、两条命令-如何原子加锁"}},[s._v("#")]),s._v(" 1、两条命令，如何原子加锁")]),s._v(" "),t("p",[s._v("setnx与设置过期时间是两条命令，如果setnx以后没来得及执行expire就宕机了，依然会造成死锁，因此我们需要保证加锁的原子性。Redis支持将这两条命令合并在一起：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" ex "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("过期时间，单位秒"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nx\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这样的命令就有了原子性")]),s._v(" "),t("h3",{attrs:{id:"_2、未执行完锁就被释放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、未执行完锁就被释放"}},[s._v("#")]),s._v(" 2、未执行完锁就被释放")]),s._v(" "),t("p",[s._v("当获取到分布式锁后的业务处理时间过长，超过了EX设置的过期时间，就会导致锁提前被释放。")]),s._v(" "),t("p",[s._v("此时另一个线程获取分布式锁成功，就会造成两个线程同时获取到锁的状态，锁就失效了。")]),s._v(" "),t("p",[s._v("另外，第一个线程如果并不知道锁已经被释放，误释放了第二个线程加的锁，就全乱套了。")]),s._v(" "),t("h4",{attrs:{id:"对于锁被提前释放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对于锁被提前释放"}},[s._v("#")]),s._v(" 对于锁被提前释放")]),s._v(" "),t("p",[s._v("简单的方案是加长EX过期时间。Redisson 提供了看门狗机制。")]),s._v(" "),t("h4",{attrs:{id:"对于删除并非自己的锁-随机value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对于删除并非自己的锁-随机value"}},[s._v("#")]),s._v(" 对于删除并非自己的锁：随机value")]),s._v(" "),t("p",[s._v("value 的值设置为随机数主要是为了**「避免误删不属于自己的锁」**，释放锁的时候需要检查 key 是否存在，且 key 对应的值是否和我指定的值一样，是一样的才能释放锁。")]),s._v(" "),t("blockquote",[t("p",[s._v("一个线程(我)去解锁，保证解锁的这把锁是我自己加的，因为这个key对应的value是随机值只有我知道。")])]),s._v(" "),t("p",[s._v("当然，释放锁要额外多个判断的话，也需要一个额外手段保证原子性，Lua，后面再说")]),s._v(" "),t("h2",{attrs:{id:"二、解锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、解锁"}},[s._v("#")]),s._v(" 二、解锁")]),s._v(" "),t("p",[s._v("由于加锁的实现，解锁时需要先获取key对应的value，判断相等后，再解锁，不是一个命令能解决的，需要保证原子性，借助 Lua 脚本。")]),s._v(" "),t("h3",{attrs:{id:"保证解锁原子性-lua脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#保证解锁原子性-lua脚本"}},[s._v("#")]),s._v(" 保证解锁原子性：lua脚本")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Jedis")]),s._v(" jedis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" lockKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" flagId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" script "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\"")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" jedis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("eval")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("script"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("singletonList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lockKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("singletonList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("flagId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1L"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断执行结果")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"单机redis分布式锁的缺陷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单机redis分布式锁的缺陷"}},[s._v("#")]),s._v(" 单机Redis分布式锁的缺陷")]),s._v(" "),t("p",[s._v("单机Redis存在单点故障风险。加锁时只作用在一个 Redis 节点上。")]),s._v(" "),t("p",[s._v("举个例子，如果这个Redis是一个 master 节点由于某些原因发生了主从切换，且还没来得及让从节点同步，那么就会出现锁丢失的情况。")]),s._v(" "),t("p",[s._v("于是，Redis 官方搞出来了红锁。")]),s._v(" "),t("p",[s._v("红锁大致原理是，向每个redis服务器写锁，超过半数成功才算成功获得锁")]),s._v(" "),t("ol",[t("li",[s._v("获取当前 Unix 时间，以毫秒为单位。")]),s._v(" "),t("li",[s._v("依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis  设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在  5-50 毫秒之间。这样可以避免服务器端 Redis  已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。")]),s._v(" "),t("li",[s._v("客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。")]),s._v(" "),t("li",[s._v("如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。")]),s._v(" "),t("li",[s._v("如果因为某些原因，获取锁失败（没有在至少 N/2+1 个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。")])]),s._v(" "),t("p",[s._v("红锁仍然存在一个锁被两个线程获取的风险，常见的解决方案是延迟重启，这里就不展开了。")]),s._v(" "),t("h2",{attrs:{id:"redisson-实现分布式锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redisson-实现分布式锁"}},[s._v("#")]),s._v(" Redisson 实现分布式锁")]),s._v(" "),t("h3",{attrs:{id:"基本使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本使用"}},[s._v("#")]),s._v(" 基本使用")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RLock")]),s._v(" lock "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" redissonClient"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\tlock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isHeldByCurrentThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h4",{attrs:{id:"lock与trylock的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lock与trylock的区别"}},[s._v("#")]),s._v(" lock与tryLock的区别")]),s._v(" "),t("ul",[t("li",[s._v("lock：无返回值。默认可以获取锁30s")]),s._v(" "),t("li",[s._v("tryLock：有返回值，表示是否成功获取锁")])]),s._v(" "),t("p",[s._v("redisson 的 trylock 三个参数：")]),s._v(" "),t("ol",[t("li",[s._v("获取锁失败的最大等待时间MaxWaitTime 在此期间会不断重试获取锁")]),s._v(" "),t("li",[s._v("leasetime 多久时间 自动释放锁（避免死锁问题）")]),s._v(" "),t("li",[s._v("时间的单位")])]),s._v(" "),t("h3",{attrs:{id:"redisson-原理简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redisson-原理简介"}},[s._v("#")]),s._v(" Redisson 原理简介")]),s._v(" "),t("p",[s._v("Redisson是对 Lua 脚本做了封装从而保证原子性，且发现是 redis 集群会自动升级成 RedLock 方案。"),t("img",{staticStyle:{zoom:"50%"},attrs:{src:a(334),alt:"image-20230525150326866"}})]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:a(335),alt:"image-20230525150346395"}}),s._v(" "),t("h4",{attrs:{id:"随机value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#随机value"}},[s._v("#")]),s._v(" 随机value")]),s._v(" "),t("p",[s._v("为了解决「误删并非自己的锁」的问题，前文说过可以使用随机 value 。而 Redisson 分布式锁不需要手动设置。Redisson 会帮我们生成一个由 UUID 和 加锁操作的线程的 threadId 用冒号拼接起来的字符串，")]),s._v(" "),t("h4",{attrs:{id:"可重入性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可重入性"}},[s._v("#")]),s._v(" "),t("strong",[s._v("可重入性")])]),s._v(" "),t("p",[s._v("可重入性就是同一线程Id 要能够成功多次获取锁")]),s._v(" "),t("p",[s._v("原理：redis中的value取Hash 首先判断value随机值是不是自己的锁，另外记录一个数量num 第一次来时设置为1，之后获取+1；若num删到0 才释放锁 。")]),s._v(" "),t("h4",{attrs:{id:"看门狗机制-watchdog"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#看门狗机制-watchdog"}},[s._v("#")]),s._v(" 看门狗机制：watchdog")]),s._v(" "),t("p",[s._v("为了解决分布式锁由于超时时间设置的过短的问题，")]),s._v(" "),t("p",[s._v("前面说过 trylock 有三个参数，其中，若 leasetime 为 -1，代表开启 watchdog 看门狗机制，就是每过（releaseTime / 3），刷新超时时间，避免还没来得及执行完，锁就被提前释放。")]),s._v(" "),t("p",[s._v("watchdog  是基于 Netty 的时间轮实现的定时任务。")]),s._v(" "),t("ul",[t("li",[s._v("好处是：不再需要为 TTL 的设置纠结")]),s._v(" "),t("li",[s._v("坏处是：额外的定时任务，消耗资源")])]),s._v(" "),t("h3",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[s._v("#")]),s._v(" 参考文档")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3NjU3NTkwMQ==&mid=2247505097&idx=1&sn=5c03cb769c4458350f4d4a321ad51f5a&chksm=cf32b93bf845302ded8d61df9c254ae81e1f7a38b63bc64f5cfdc1bad559d514baea4d245a54#rd",target:"_blank",rel:"noopener noreferrer"}},[s._v("关于RedLock好坏的讨论"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("《Redis 核心技术与实战》")])])}),[],!1,null,null,null);t.default=e.exports}}]);