(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{336:function(s,a,t){s.exports=t.p+"assets/img/image-20240114164201804.3658ef09.png"},337:function(s,a,t){s.exports=t.p+"assets/img/image-20240114163115469.32dfeaa6.png"},410:function(s,a,t){"use strict";t.r(a);var e=t(14),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"redis-事务-vs-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-事务-vs-lua"}},[s._v("#")]),s._v(" Redis 事务 vs Lua")]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("Lua 脚本也能保证一定的原子性，这与 Redis 事务机制十分类似，为啥 Redis 会支持两种类似的机制呢？")]),s._v(" "),a("p",[s._v("另外，在 stackoverflow 十几年前的远古帖子上还能看到有人引用官网的话如下：")]),s._v(" "),a("blockquote",[a("p",[s._v('"we may deprecate and finally remove transactions"')])]),s._v(" "),a("p",[a("img",{attrs:{src:t(336),alt:"image-20240114164201804"}})]),s._v(" "),a("p",[s._v("但直至 Redis 7.0 版本，Redis 事务功能依然健在，而新版本的官网也找不到这句话了。")]),s._v(" "),a("p",[s._v("所以，事务和 Lua 到底有何区别？我们应该如何做选择呢？")]),s._v(" "),a("p",[s._v("我们先分别介绍一下事务 与 Lua 机制。")]),s._v(" "),a("h1",{attrs:{id:"redis-事务简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-事务简介"}},[s._v("#")]),s._v(" Redis 事务简介")]),s._v(" "),a("h2",{attrs:{id:"redis-事务基本使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-事务基本使用"}},[s._v("#")]),s._v(" Redis 事务基本使用")]),s._v(" "),a("p",[s._v("Redis 事务基本可以分为如下几个步骤：")]),s._v(" "),a("h3",{attrs:{id:"_1、开启事务-multi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、开启事务-multi"}},[s._v("#")]),s._v(" 1、开启事务：multi")]),s._v(" "),a("p",[s._v("让客户端Client变为事务模式状态")]),s._v(" "),a("h3",{attrs:{id:"_2、命令入列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、命令入列"}},[s._v("#")]),s._v(" 2、命令入列")]),s._v(" "),a("p",[s._v("输入multi后的所有命令会被存储在一个命令队列中，作为事务的一部分")]),s._v(" "),a("p",[s._v("此时，所有命令返回值均为 "),a("code",[s._v("QUEUED")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"_3、执行事务-exec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、执行事务-exec"}},[s._v("#")]),s._v(" 3、执行事务：exec")]),s._v(" "),a("p",[s._v("执行exec，执行事务")]),s._v(" "),a("h3",{attrs:{id:"_4、放弃事务-discard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、放弃事务-discard"}},[s._v("#")]),s._v(" 4、放弃事务：discard")]),s._v(" "),a("p",[s._v("不会执行事务")]),s._v(" "),a("h2",{attrs:{id:"redis-事务有acid吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-事务有acid吗"}},[s._v("#")]),s._v(" Redis 事务有ACID吗")]),s._v(" "),a("h3",{attrs:{id:"_1、原子性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、原子性"}},[s._v("#")]),s._v(" 1、原子性")]),s._v(" "),a("p",[s._v("原子性的描述是：一个事务的操作要么全部成功，要么全部失败。Redis 事务是否有原子性这个问题，需要分类讨论，但我们需要先明确一点：Redis 事务不支持回滚。")]),s._v(" "),a("h4",{attrs:{id:"不支持回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不支持回滚"}},[s._v("#")]),s._v(" 不支持回滚")]),s._v(" "),a("p",[s._v("Redis 事务并不支持回滚，这与许多关系型数据库截然相反，关于这个问题我找到了一篇官方回答：《为什么 Redis 不支持事务回滚》，非常推荐。简单说就是，Redis 事务的所有命令会被一起执行，并且事务的执行期间，别的客户端发送的命令需要等待事务执行完毕才去执行。加之 Redis 单线程的特性，可以理解为事务获取到了Redis 全局锁。换句话说，只要编码正确，"),a("strong",[s._v("事务总会成功，不会失败")]),s._v("。")]),s._v(" "),a("p",[s._v("现在再回到Redis 事务原子性的讨论中：")]),s._v(" "),a("ul",[a("li",[s._v("当事务存在「语法错误」，能够被 Redis "),a("strong",[s._v("在命令入队时")]),s._v("检测出，执行EXEC会失败，有原子性")]),s._v(" "),a("li",[s._v("当事务存在「运行时错误」，比如命令和操作的数据类型不匹配，此时事务中其它正确的命令仍然会被按序执行，此时无原子性，即上述编码错误的情况")]),s._v(" "),a("li",[s._v("当事务正常执行，无任何错误时，有原子性")])]),s._v(" "),a("p",[s._v("因此，只要编码正确，Redis 事务总能保证原子性。")]),s._v(" "),a("h3",{attrs:{id:"_2、隔离性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、隔离性"}},[s._v("#")]),s._v(" 2、隔离性")]),s._v(" "),a("p",[s._v("既然 Redis 单线程执行命令，并且「事务的所有命令会被一起执行」，其它客户端的命令此时会被阻塞，因此 Redis 事务执行过程中能保证天然的隔离性。")]),s._v(" "),a("p",[s._v("但是，一个 Redis 事务的生命周期包含两部分：开启到执行前，和执行过程中。")]),s._v(" "),a("p",[s._v("事务开启到正式执行前，可能会存在隔离性问题，Redis 提供了  watch 机制来解决这个问题。")]),s._v(" "),a("h4",{attrs:{id:"监控-watch-乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监控-watch-乐观锁"}},[s._v("#")]),s._v(" 监控 watch：乐观锁")]),s._v(" "),a("blockquote",[a("p",[s._v("watch使用在 multi 事务开启之前")])]),s._v(" "),a("p",[s._v("watch 可以保证 EXEC 前的隔离性，可以理解为一把乐观锁。")]),s._v(" "),a("p",[s._v("使用watch监控若干个key，如果在事务 EXEC 前，某个监控项被修改了，那么在执行 EXEC 命令时，会放弃事务")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("WATCH "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("使用unwatch可以清除所有监控。")]),s._v(" "),a("p",[s._v("因此，合理地使用 watch 机制，Redis 事务也能保证隔离性。")]),s._v(" "),a("h3",{attrs:{id:"_3、持久性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、持久性"}},[s._v("#")]),s._v(" 3、持久性")]),s._v(" "),a("p",[s._v("这取决于 Redis 的持久化配置模式。")]),s._v(" "),a("p",[s._v("但不管 Redis 采用什么持久化模式，都可能出现数据丢失的情况，所以无法保证事务的持久性。")]),s._v(" "),a("h3",{attrs:{id:"_4、一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、一致性"}},[s._v("#")]),s._v(" 4、一致性")]),s._v(" "),a("p",[s._v("Redis 事务机制对一致性属性是有保证的。")]),s._v(" "),a("h2",{attrs:{id:"redis-事务的不足"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-事务的不足"}},[s._v("#")]),s._v(" Redis 事务的不足")]),s._v(" "),a("p",[s._v("一旦事务需要依赖于一个 get 操作的结果，就非常不方便。因为事务是一起执行的，我们没办法将一个操作的结果作为命令的一部分进行执行。")]),s._v(" "),a("p",[s._v("这么说可能有些抽象，举个例子，假如没有 incrby 命令，要使用事务保证原子性，需要这样执行：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("WATCH counter\nGET counter\nMULTI\nSET counter <the value obtained from GET + any increment>\nEXEC\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("即在事务开始前，先获取事务依赖的操作结果，然后执行事务。那要保证线程安全，就必须引入乐观锁机制，使用 WATCH 命令，而当多个客户端都并发执行这段逻辑时，事务执行失败的概率就非常高，容易不断再次 get ，再次执行事务，再次事务被放弃，陷入循环。")]),s._v(" "),a("h1",{attrs:{id:"lua-脚本简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lua-脚本简介"}},[s._v("#")]),s._v(" Lua 脚本简介")]),s._v(" "),a("p",[s._v("Redis可以保证脚本内的命令一次性、按顺序地执行，其同时也不提供事务运行错误的回滚，执行过程中如果部分命令运行错误，剩下的命令还是会继续运行完。")]),s._v(" "),a("h2",{attrs:{id:"lua-脚本的基本使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lua-脚本的基本使用"}},[s._v("#")]),s._v(" Lua 脚本的基本使用")]),s._v(" "),a("h4",{attrs:{id:"执行脚本-eval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行脚本-eval"}},[s._v("#")]),s._v(" 执行脚本：EVAL")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# [script] 是要执行的脚本,用""包裹')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [numkeys] 代表 key 的数量 ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [key ...] key 的名称 [numkeys]个 Lua操作的 Key 的名称必须来自于此。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [arg ...] 其它参数")]),s._v("\nEVAL "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[script]"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("numkeys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("arg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("p",[s._v("EVAL 不仅仅会执行脚本，还会载入脚本，后续会介绍 Redis 的 Lua 缓存")])]),s._v(" "),a("h4",{attrs:{id:"lua-操作-key-必须来自-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lua-操作-key-必须来自-keys"}},[s._v("#")]),s._v(" Lua 操作 Key：必须来自 KEYS")]),s._v(" "),a("p",[s._v("Lua 脚本操作的 Key 的来源，必须来自于 KEYS[x]")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("EVAL "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"return { KEYS[1], KEYS[2], ARGV[1], ARGV[2], ARGV[3] }"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" key1 key2 arg1 arg2 arg3\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"key1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"key2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"arg1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"arg2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"arg3"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"lua-脚本执行-redis-命令-redis-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lua-脚本执行-redis-命令-redis-call"}},[s._v("#")]),s._v(" Lua 脚本执行 redis 命令：redis.call")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("  EVAL "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"return redis.call('GET','mystring')\"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("redis.call")]),s._v(" 如果发生错误，会立即返回错误，并终止 Lua 脚本的执行")]),s._v(" "),a("h4",{attrs:{id:"不同的错误处理-redis-pcall"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同的错误处理-redis-pcall"}},[s._v("#")]),s._v(" 不同的错误处理：redis.pcall")]),s._v(" "),a("p",[a("code",[s._v("redis.pcall")]),s._v(" 和 "),a("code",[s._v("redis.call")]),s._v(" 唯一的区别是出错时的处理。")]),s._v(" "),a("p",[a("code",[s._v("redis.pcall")]),s._v(" 并不会终止，而是返回一个带err域的Lua表？")]),s._v(" "),a("h3",{attrs:{id:"脚本缓存-sha1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脚本缓存-sha1"}},[s._v("#")]),s._v(" 脚本缓存：SHA1")]),s._v(" "),a("p",[s._v("单纯的 EVAL 命令存在一个问题，即每次都需要将完整的 Lua 脚本传送给 Redis。")]),s._v(" "),a("p",[s._v("为了解决这个问题，Redis 专门有一个缓存区，存放 Lua 脚本的内容以及 SHA1的值。")]),s._v(" "),a("p",[s._v("EVAL 命令既会执行命令，也会载入缓存，"),a("code",[s._v("SCRIPT LOAD")]),s._v(" 是纯粹的载入缓存，在 Redis 持有缓存后，只需要"),a("code",[s._v("EVALSHA")]),s._v(" 命令，即可不传输完整的 Lua 脚本，只传输 SHA1 的值来执行脚本。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  加载脚本")]),s._v("\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SCRIPT LOAD "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"return 'Immabe a cached script'\"")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c664a3bf70bd1d45c4284ffebb65a6f2299bfc9f"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  执行脚本")]),s._v("\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" EVALSHA c664a3bf70bd1d45c4284ffebb65a6f2299bfc9f "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Immabe a cached script"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("脚本缓存本身不会持久化，重启 Redis，主从故障转移等等情况，脚本缓存都会丢失，此时 "),a("code",[s._v("EVALSHA")]),s._v(" 命令会返回")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(error) NOSCRIPT No matching script\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在客户端层面需要对缓存丢失的情况做进一步保证，如 "),a("code",[s._v("EVALSHA")]),s._v(" 报错后执行 "),a("code",[s._v("EVAL")]),s._v(" 命令 。")]),s._v(" "),a("h2",{attrs:{id:"redis-7-0-新特性-eval-flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-7-0-新特性-eval-flags"}},[s._v("#")]),s._v(" Redis 7.0 新特性：Eval flags")]),s._v(" "),a("p",[s._v("Redis 7.0 前，Redis 假设所有的脚本都会进行数据的读和写操作。但 Redis 7.0 提供了 "),a("code",[s._v("Eval flags")]),s._v(" 可以告知 Redis 脚本的行为。")]),s._v(" "),a("div",{staticClass:"language-lua line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!lua flags=no-writes,allow-stale")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'get'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("只要 Redis 发现 "),a("code",[s._v("#!")]),s._v(" ，就会获得一些默认的 lua flags，这和没有 "),a("code",[s._v("#!")]),s._v(" 的 Lua 脚本不同")])]),s._v(" "),a("p",[s._v("没有 "),a("code",[s._v("#!")]),s._v(" 的 Lua 脚本可以访问集群中的所有节点，但是由于 "),a("code",[s._v("#!")]),s._v(" 默认继承了一些flags，所以不能。")]),s._v(" "),a("p",[s._v("Redis 默认脚本有如下特性：")]),s._v(" "),a("ol",[a("li",[s._v("既有读操作，又有写操作")]),s._v(" "),a("li",[s._v("可以运行在集群模式下，但不能跨 slots 访问数据")]),s._v(" "),a("li",[s._v("从节点数据可能过时，会被拒绝操作从节点")]),s._v(" "),a("li",[s._v("内存空间小时，会拒绝执行来避免内存溢出")])]),s._v(" "),a("p",[s._v("下面列出部分参数及含义：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[s._v("参数")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("含义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("allow-cross-slot-keys")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("允许脚本访问来自不同slots的keys（尽管应该尽量避免这样做）")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("no-cluster")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("如果Redis在集群模式下运行，执行脚本会返回错误")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("no-writes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("脚本只有读操作，没有写操作")])])])]),s._v(" "),a("h2",{attrs:{id:"集群对-lua-的限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群对-lua-的限制"}},[s._v("#")]),s._v(" 集群对 Lua 的限制")]),s._v(" "),a("p",[s._v("默认情况下，集群模式的 Lua 不能够跨 slots 访问数据，否则会得到如下错误：")]),s._v(" "),a("blockquote",[a("p",[s._v("Lua script attempted to access keys of different hash slots")])]),s._v(" "),a("p",[s._v("集群下，Lua 脚本默认有一个限制，即一个 Lua 脚本操作的所有 key 必须在同一个slot上。")]),s._v(" "),a("h3",{attrs:{id:"为什么是-slot-而非-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么是-slot-而非-node"}},[s._v("#")]),s._v(" 为什么是 slot 而非 node")]),s._v(" "),a("p",[s._v("即：为什么 Lua 不能够在同一个 node 的不同 slots 上操作多个 key 呢？")]),s._v(" "),a("p",[s._v("因为，slot 的目的就是为了解耦 Redis 实例与数据的关系的。slot 应该可以在不同分片节点上进行切换以实现负载均衡。如果是分片而非 slot ，那么很有可能，你的代码今天能运行，明天就会爆炸。")]),s._v(" "),a("p",[s._v("有意思的是，在以前的官方文档上，也误使用了 node 而非 slot 表达，因此在此强调一下。")]),s._v(" "),a("p",[a("img",{attrs:{src:t(337),alt:"image-20240114163115469"}})]),s._v(" "),a("h3",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[s._v("#")]),s._v(" 解决方案")]),s._v(" "),a("h4",{attrs:{id:"_1、hashtags-保证-key-在同一节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、hashtags-保证-key-在同一节点"}},[s._v("#")]),s._v(" 1、HashTags：保证 key 在同一节点")]),s._v(" "),a("p",[s._v("如果键中的{}括号之间有子串，则只对字符串内的内容进行哈希处理，这个子串叫做「哈希标签」。")]),s._v(" "),a("p",[s._v("例如：Redis 保证 "),a("code",[s._v("user:{123}:profile")]),s._v(" 和 "),a("code",[s._v("user:{123}:account")]),s._v(" 会在同一个哈希槽中，因为它们的「哈希标签」是相同的。")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("CLUSTER KEYSLOT")]),s._v(" 命令获取目标Key的哈希槽（Hash Slot）进行确认。")]),s._v(" "),a("h4",{attrs:{id:"_2、考虑数据类型的设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、考虑数据类型的设计"}},[s._v("#")]),s._v(" 2、考虑数据类型的设计")]),s._v(" "),a("p",[s._v("我们可以使用 hashes, lists, or sets 等数据结构来保存有关联的数据，使得 Lua 无需跨 slots 访问数据，一个 Key 即可解决。")]),s._v(" "),a("h4",{attrs:{id:"_3、eval-flags-allow-cross-slot-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、eval-flags-allow-cross-slot-keys"}},[s._v("#")]),s._v(" 3、Eval Flags：allow-cross-slot-keys")]),s._v(" "),a("p",[s._v("利用 Redis 7.0 新特性 Eval flags，允许脚本访问来自不同slots的keys，尽管这种做法是不推荐的。")]),s._v(" "),a("div",{staticClass:"language-lua line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!lua flags=allow-cross-slot-keys")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"lua-的其它限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lua-的其它限制"}},[s._v("#")]),s._v(" Lua 的其它限制")]),s._v(" "),a("h3",{attrs:{id:"执行时长限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行时长限制"}},[s._v("#")]),s._v(" 执行时长限制")]),s._v(" "),a("p",[s._v("lua 脚本如果执行时长超过 5 s，Redis 会自动终止该脚本")]),s._v(" "),a("h2",{attrs:{id:"主从模式下-lua-的数据同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主从模式下-lua-的数据同步"}},[s._v("#")]),s._v(" 主从模式下 Lua 的数据同步")]),s._v(" "),a("p",[s._v("Redis 7.0 只有一种同步方案：Effects replication。")]),s._v(" "),a("p",[s._v("主节点会将 Lua 脚本中，实际修改数据的命令封装成「MULTI/EXEC 的事务」并同步给从节点（以及AOF）。")]),s._v(" "),a("p",[s._v("从节点无需将这些命令当作脚本执行，便可以保证主从节点的数据一致。")]),s._v(" "),a("blockquote",[a("p",[s._v("在 Redis 5.0 之后默认的方案即为 Effects replication。")]),s._v(" "),a("p",[s._v("另一个方案叫 Verbatim replication，需要从节点与主节点完全执行相同的工作，在 Redis 7.0 被废弃。")])]),s._v(" "),a("h2",{attrs:{id:"lua-常见命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lua-常见命令"}},[s._v("#")]),s._v(" Lua 常见命令")]),s._v(" "),a("h4",{attrs:{id:"载入并执行脚本-eval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#载入并执行脚本-eval"}},[s._v("#")]),s._v(" 载入并执行脚本：EVAL")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# [script] 是要执行的脚本,用""包裹')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [numkeys] 代表 key 的数量 ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [key ...] key 的名称 [numkeys]个 Lua操作的 Key 的名称必须来自于此。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [arg ...] 其它参数")]),s._v("\nEVAL "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[script]"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("numkeys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("arg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"执行载入的脚本-evalsha"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行载入的脚本-evalsha"}},[s._v("#")]),s._v(" 执行载入的脚本：EVALSHA")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("EVALSHA sha1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"查询脚本是否已载入-exists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询脚本是否已载入-exists"}},[s._v("#")]),s._v(" 查询脚本是否已载入：EXISTS")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("SCRIPT EXISTS "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SHA1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0 不存在 1 存在")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"载入脚本-load"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#载入脚本-load"}},[s._v("#")]),s._v(" 载入脚本：LOAD")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不会执行脚本")]),s._v("\nSCRIPT LOAD\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"清除载入的脚本-flush"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清除载入的脚本-flush"}},[s._v("#")]),s._v(" 清除载入的脚本：FLUSH")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("SCRIPT FLUSH\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"终止脚本的执行-script-kill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#终止脚本的执行-script-kill"}},[s._v("#")]),s._v(" 终止脚本的执行：SCRIPT KILL")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一旦 lua 脚本存在写入操作,就无法终止")]),s._v("\nSCRIPT KILL\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h1",{attrs:{id:"lua-vs-事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lua-vs-事务"}},[s._v("#")]),s._v(" Lua vs 事务")]),s._v(" "),a("p",[s._v("最后，我们来对比 Lua 和 事务的主要区别。")]),s._v(" "),a("h3",{attrs:{id:"性能比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能比较"}},[s._v("#")]),s._v(" 性能比较")]),s._v(" "),a("p",[s._v("根据官方文档，Lua 的理论效率要高于事务，但实际运行过程中也可能比较接近。Lua 略胜。")]),s._v(" "),a("h3",{attrs:{id:"使用成本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用成本"}},[s._v("#")]),s._v(" 使用成本")]),s._v(" "),a("p",[s._v("尽管 Redis 事务相关的命令非常少，但 Lua 脚本的编写也十分简单，入门门槛低。Redis 事务略胜，但不关键。")]),s._v(" "),a("h3",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),a("p",[s._v("Lua 更灵活，在 Lua 脚本内，可以通过 if then 语句做逻辑控制，而事务不行。")]),s._v(" "),a("p",[s._v("另外一旦事务需要依赖于一个 get 操作的结果，Redis 事务就很难做到了。在灵活度上 Lua 完胜。")]),s._v(" "),a("h3",{attrs:{id:"什么时候该用事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候该用事务"}},[s._v("#")]),s._v(" 什么时候该用事务")]),s._v(" "),a("p",[s._v("总结是，能用 Lua ，就用 Lua，实在用不了才用事务。")]),s._v(" "),a("ul",[a("li",[s._v("您的事务所依赖的键不会被频繁修改，这意味着您确信乐观锁定几乎永远不会中止事务。")]),s._v(" "),a("li",[s._v("可能是，第三方服务编写的大量逻辑，因此没有简单的方法可以将该逻辑移动到 Lua 脚本。")])]),s._v(" "),a("p",[s._v("除非这两点同时满足，否则都更推荐使用 Lua。")]),s._v(" "),a("h4",{attrs:{id:"参考文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[s._v("#")]),s._v(" 参考文档")]),s._v(" "),a("p",[s._v("《Redis 核心技术与实战》")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://redis.io/docs/interact/transactions/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis 官网"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://redis.com/blog/you-dont-need-transaction-rollbacks-in-redis/",target:"_blank",rel:"noopener noreferrer"}},[s._v("You Don’t Need Transaction Rollbacks in Redis"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.dragonflydb.io/error-solutions/crossslot-keys-in-request-dont-hash-to-the-same-slot",target:"_blank",rel:"noopener noreferrer"}},[s._v("Error: crossslot keys in request don't hash to the same slot"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/redis/redis/issues/5118",target:"_blank",rel:"noopener noreferrer"}},[s._v("CROSSSLOT error on single-shard cluster"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);