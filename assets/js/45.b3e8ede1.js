(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{345:function(s,a,t){s.exports=t.p+"assets/img/image-20240114163115469.32dfeaa6.png"},418:function(s,a,t){"use strict";t.r(a);var e=t(14),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"redis集群-redis-cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis集群-redis-cluster"}},[s._v("#")]),s._v(" Redis集群：Redis cluster")]),s._v(" "),a("p",[s._v("集群，就是使用多台Redis服务器构成一个整体，提供服务。和主从不同的是，集群的主节点存储的数据是不同的")]),s._v(" "),a("p",[s._v("Redis Cluster是Redis官方提供的一种对分片集群的实现。")]),s._v(" "),a("h3",{attrs:{id:"集群的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群的意义"}},[s._v("#")]),s._v(" 集群的意义")]),s._v(" "),a("p",[s._v("随着项目规模的扩大，单机Redis的内存不足以存储这么多数据。即便能够存储，内存占用很高也会影响性能。")]),s._v(" "),a("p",[s._v("因此我们需要将数据分片存储。")]),s._v(" "),a("h2",{attrs:{id:"集群快速开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群快速开始"}},[s._v("#")]),s._v(" 集群快速开始")]),s._v(" "),a("h3",{attrs:{id:"一、create-cluster-工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、create-cluster-工具"}},[s._v("#")]),s._v(" 一、create-cluster 工具")]),s._v(" "),a("p",[s._v("create-cluster工具是官方提供的快速搭建集群工具，在 utils/create-cluster 目录下")]),s._v(" "),a("p",[s._v("集群的所有节点只能在同一台服务器上，所以一般只能用来测试，并不能在生产环境这样搭建，命令如下：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("./create-cluster start  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建集群")]),s._v("\n./create-cluster create "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 组建集群 输入 yes 3 主 3 从")]),s._v("\nredis-cli "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30001")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 连接")]),s._v("\n./create-cluster stop   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关闭集群")]),s._v("\n./create-cluster clean  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清理集群")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"二、手动创建集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、手动创建集群"}},[s._v("#")]),s._v(" 二、手动创建集群")]),s._v(" "),a("h4",{attrs:{id:"_1、开启集群模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、开启集群模式"}},[s._v("#")]),s._v(" 1、开启集群模式")]),s._v(" "),a("p",[s._v("所有节点，不管主从，都需要开启")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cluster-enabled "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"_2、启动redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、启动redis"}},[s._v("#")]),s._v(" 2、启动Redis")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("./src/redis-server redis.conf\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"_3、创建集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、创建集群"}},[s._v("#")]),s._v(" 3、创建集群")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所有节点")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# n表示一个主节点对应n个从节点")]),s._v("\nredis-cli "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cluster")]),s._v(" create "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ip1:port1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127")]),s._v(":30001"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ip3:port3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". --cluster-replicas "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"集群实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群实现原理"}},[s._v("#")]),s._v(" 集群实现原理")]),s._v(" "),a("h3",{attrs:{id:"全局角度下的redis集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局角度下的redis集群"}},[s._v("#")]),s._v(" 全局角度下的Redis集群")]),s._v(" "),a("p",[s._v("从整体上来说，Redis集群可以认为是一个很大的Redis数据库，但我们知道数据是存储在不同的节点上的。")]),s._v(" "),a("p",[s._v("因此我们需要知道：哪些数据存储在哪个Redis节点？")]),s._v(" "),a("h3",{attrs:{id:"数据分片-hash-slot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据分片-hash-slot"}},[s._v("#")]),s._v(" 数据分片：hash slot")]),s._v(" "),a("p",[s._v("数据分片，是一种将数据区分存储的手段。")]),s._v(" "),a("p",[s._v("Redis 集群将所有的数据分为 16384 个 slots（槽），每个节点负责其中的一部分槽位。")]),s._v(" "),a("p",[s._v("当进行数据操作时，操作会被发送给集群中的某一个节点，Redis会根据key定位slot。Redis默认使用 CRC16 算法对key进行 hash 得到一个整数值% 16384，从而定位slot。")]),s._v(" "),a("p",[s._v("如果slot不属于该节点的处理范围，该Redis会将请求转发给目标节点。")]),s._v(" "),a("h3",{attrs:{id:"如何实现重新分片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现重新分片"}},[s._v("#")]),s._v(" 如何实现重新分片")]),s._v(" "),a("p",[s._v("重新分片的时机：当集群的节点动态增减，或是我们手动进行数据重新分片。")]),s._v(" "),a("p",[s._v("我们知道：数据和节点是没关系的，数据只和slot有关系，而重新分片修改的是节点负责的slot范围。")]),s._v(" "),a("p",[s._v("因此只需要：")]),s._v(" "),a("ul",[a("li",[s._v("将不属于自己的slot的数据，交付给将要负责的节点")]),s._v(" "),a("li",[s._v("向自己将要负责的slot的数据所在的节点，获取数据")])]),s._v(" "),a("p",[s._v("即可。")]),s._v(" "),a("h4",{attrs:{id:"hash-slot-的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash-slot-的好处"}},[s._v("#")]),s._v(" hash slot 的好处")]),s._v(" "),a("p",[s._v("1.解耦数据和节点之间的关系，简化了节点扩容和收缩难度。")]),s._v(" "),a("p",[s._v("2.节点自身维护槽的映射关系，不需要客户端或者代理服务维护槽分区元数据。")]),s._v(" "),a("p",[s._v("3.支持节点、槽、键之间的映射查询，用于数据路由，在线伸缩等场景。")]),s._v(" "),a("p",[s._v("4.无论数据规模大，还是小，Redis虚拟槽分区各个节点的负载，都会比较均衡 。而一致性哈希在大批量的数据场景下负载更加均衡，但是在数据规模小的场景下，会出现单位时间内某个节点完全空闲的情况出现")]),s._v(" "),a("p",[s._v("当节点扩容或者缩容时，对数据槽进行重新分配迁移即可，数据不会丢失，可扩展性强。")]),s._v(" "),a("h2",{attrs:{id:"客户端如何访问集群redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端如何访问集群redis"}},[s._v("#")]),s._v(" 客户端如何访问集群Redis")]),s._v(" "),a("p",[s._v("客户端是如何找到目标key所在的Redis节点的？")]),s._v(" "),a("p",[s._v("集群的每个节点都有hash slot的分配信息，在客户端初次访问时，节点也会将hash slot的分配信息发给客户端。")]),s._v(" "),a("p",[s._v("因此，"),a("strong",[s._v("客户端也持有hash slot的分配信息")]),s._v("，从而能够决定将key发给哪个节点。")]),s._v(" "),a("p",[s._v("但是，hash slot可能变化，比如rebalance负载均衡，因此Redis提供了如下两种机制来应对不同的情况：")]),s._v(" "),a("h3",{attrs:{id:"_1、moved-重定向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、moved-重定向"}},[s._v("#")]),s._v(" 1、MOVED：重定向")]),s._v(" "),a("p",[s._v("此时，hash slot已经发生变化，并且『原先客户端认为slot所在的节点』知道该slot目前是谁负责，就会返回一个")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# key 对应的 hash slot")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# key 所在的 节点IP port")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" MOVED "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("hash slot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("IP:port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("同时，客户端修改本地的缓存信息。")]),s._v(" "),a("h3",{attrs:{id:"_2、ask-错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、ask-错误"}},[s._v("#")]),s._v(" 2、ASK：错误")]),s._v(" "),a("p",[s._v("MOVED忽略的一个问题是：slot对应的所有数据可能没有完全传递给新节点。此时会返回一个")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ASK 表示数据正在迁移")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASK "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("hash slot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("IP:port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接着客户端需要给这个新的节点发送一个ASKING")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 让这个实例允许执行客户端接下来发送的命令")]),s._v("\nASKING \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后才发送操作命令")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("ASK 命令不会更新客户端缓存的哈希槽分配信息")])])]),s._v(" "),a("h2",{attrs:{id:"集群模式的高可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群模式的高可用"}},[s._v("#")]),s._v(" 集群模式的高可用")]),s._v(" "),a("p",[s._v("集群模式虽然实现了数据分片存储，但数据存储在单个Redis节点仍然有单点故障风险，因此：集群与主从不冲突")]),s._v(" "),a("h3",{attrs:{id:"集群与主从不冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群与主从不冲突"}},[s._v("#")]),s._v(" 集群与主从不冲突")]),s._v(" "),a("p",[s._v("集群架构下的一个Redis，通常也会使用主从架构进行部署。")]),s._v(" "),a("h4",{attrs:{id:"集群不需要哨兵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群不需要哨兵"}},[s._v("#")]),s._v(" 集群不需要哨兵")]),s._v(" "),a("p",[s._v("既然部署了主从，需要哨兵吗？答案是不需要。集群中的各个节点本身就承担了哨兵的工作。")]),s._v(" "),a("h3",{attrs:{id:"集群下哨兵功能的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群下哨兵功能的实现"}},[s._v("#")]),s._v(" 集群下哨兵功能的实现")]),s._v(" "),a("h4",{attrs:{id:"_1、监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、监控"}},[s._v("#")]),s._v(" 1、监控")]),s._v(" "),a("p",[s._v("这与哨兵机制非常类似，也依赖于心跳机制。")]),s._v(" "),a("p",[s._v("节点会定期向其他节点发送ping，没有收到pong，就认为"),a("strong",[s._v("主观宕机")]),s._v("（疑似下线）")]),s._v(" "),a("p",[s._v("超半数节点认为主观宕机，就是"),a("strong",[s._v("客观宕机")]),s._v("（确定下线）。")]),s._v(" "),a("h4",{attrs:{id:"_2、自动故障恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、自动故障恢复"}},[s._v("#")]),s._v(" 2、自动故障恢复")]),s._v(" "),a("p",[s._v("对客观宕机的 master node，从其所有的 slave node 中，选择一个切换成 master node。")]),s._v(" "),a("h4",{attrs:{id:"如何选定新的主节点-投票"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何选定新的主节点-投票"}},[s._v("#")]),s._v(" 如何选定新的主节点：投票")]),s._v(" "),a("p",[s._v("从节点发现主节点宕机，广播消息表示：“我想当主节点”。")]),s._v(" "),a("p",[s._v("只有主节点有投票的权力，主节点会给第一个发给自己“我想当主节点”的节点投票。")]),s._v(" "),a("p",[s._v("获得超过半数票的节点成为新的主节点。")]),s._v(" "),a("h4",{attrs:{id:"如何成为新的主节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何成为新的主节点"}},[s._v("#")]),s._v(" 如何成为新的主节点")]),s._v(" "),a("p",[s._v("新的主节点会执行"),a("code",[s._v("SLAVEOF NO ONE")]),s._v("命令，转变为主节点，接手宕机的节点负责的slots，并通知其它节点。")]),s._v(" "),a("h3",{attrs:{id:"集群间如何通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群间如何通信"}},[s._v("#")]),s._v(" 集群间如何通信")]),s._v(" "),a("p",[s._v("如果你的Redis端口号为6379，则会开启16379（+10000）作为通信专用的端口。")]),s._v(" "),a("h2",{attrs:{id:"集群常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群常用命令"}},[s._v("#")]),s._v(" 集群常用命令")]),s._v(" "),a("h4",{attrs:{id:"查看集群信息-info"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看集群信息-info"}},[s._v("#")]),s._v(" 查看集群信息： info")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("redis-cli "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 连接到集群")]),s._v("\ncluster info "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看集群信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ...")]),s._v("\ncluster_known_nodes:6 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 集群的节点数")]),s._v("\ncluster_size:3 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 集群主节点数")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"查看节点信息-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看节点信息-nodes"}},[s._v("#")]),s._v(" 查看节点信息： nodes")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("cluster nodes\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# myself:命令接收方")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 槽位 0-5460")]),s._v("\n445f2a86fe36d397613839d8cc1ae6702c976593 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:30001@40001 myself,master - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1585125835000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" connected "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("-5460\n64828ab44566fc5ad656e831fd33de87be1387a0 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:30004@40004 slave 445f2a86fe36d397613839d8cc1ae6702c976593 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1585125835000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" connected\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 40001 = 30001 + 1 用于集群间通信 ")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"动态操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态操作"}},[s._v("#")]),s._v(" 动态操作")]),s._v(" "),a("p",[s._v("以下命令可以在集群工作时，动态的修改集群。")]),s._v(" "),a("h4",{attrs:{id:"添加主节点-meet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加主节点-meet"}},[s._v("#")]),s._v(" 添加主节点：meet")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("cluster meet [ip]:[port]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"添加从节点-replicate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加从节点-replicate"}},[s._v("#")]),s._v(" 添加从节点：replicate")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cluster replicate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("主节点Id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [主节点Id] 就是nodes显式的第一列，如30001端口445f2a86fe36d397613839d8cc1ae6702c976593")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"移除节点-forget"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移除节点-forget"}},[s._v("#")]),s._v(" 移除节点：forget")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("cluster forget [节点Id]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"重新分片-reshard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重新分片-reshard"}},[s._v("#")]),s._v(" 重新分片：reshard")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这是一个交互式的命令")]),s._v("\nredis-cli "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cluster")]),s._v(" reshard "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("IP:port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:30007"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [OK] All nodes agree about slots configuration.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 移动多少slots")]),s._v("\nHow many slots "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" you want to move "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" to "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("? "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4000")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 分配给谁")]),s._v("\nWhat is the receiving "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("node")]),s._v(" ID?df0190853a53d8e078205d0e2fa56046f20362a7\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 原slots属于谁")]),s._v("\nPlease enter all the "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("node")]),s._v(" IDs.\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提示信息")]),s._v("\n  Type "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'all'")]),s._v(" to use all the nodes as "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" nodes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" the "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("hash")]),s._v(" slots.\n  Type "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'done'")]),s._v(" once you entered all the "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" nodes IDs.\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ... 转移slots信息")]),s._v("\nMoving slot "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2665")]),s._v(" from 887397e6fefe8ad19ea7569e99f5eb8a803e3785\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 确认转移")]),s._v("\nDo you want to proceed with the proposed reshard plan "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("yes/no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("? "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("reshard依赖Ruby环境。")]),s._v(" "),a("p",[s._v("出现 "),a("code",[s._v("/usr/bin/env: ruby: No such file or directory")]),s._v(" 错误，表明需要依赖 Ruby 环境，可使用命令 "),a("code",[s._v("yum install ruby")]),s._v(" 安装 Ruby 环境即可。")]),s._v(" "),a("h4",{attrs:{id:"负载均衡-rebalance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡-rebalance"}},[s._v("#")]),s._v(" 负载均衡：rebalance")]),s._v(" "),a("p",[s._v("rebalance会根据访问量自动进行负载均衡。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("redis-cli "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--cluster")]),s._v(" rebalance "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("IP:port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:30007"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"手动分片-addslots"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动分片-addslots"}},[s._v("#")]),s._v(" 手动分片：addslots")]),s._v(" "),a("h2",{attrs:{id:"集群模式对涉及多个-key-的操作的影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群模式对涉及多个-key-的操作的影响"}},[s._v("#")]),s._v(" 集群模式对涉及多个 key 的操作的影响")]),s._v(" "),a("p",[s._v("默认情况下，集群模式的 Lua 不能够跨 slots 访问数据，否则会得到如下错误：")]),s._v(" "),a("blockquote",[a("p",[s._v("Lua script attempted to access keys of different hash slots")])]),s._v(" "),a("p",[s._v("集群模式下，Lua 脚本默认有一个限制，即一个 Lua 脚本操作的所有 key 必须在同一个slot上，即便操作的所有 key 都在同一个节点上，也会报错，必须是 slot。更广泛地说，所有涉及多个 key 的操作，在 Redis 集群模式下，这些 key 都必须映射到同一个slot上。比如 Lua、Redis 事务等等。")]),s._v(" "),a("h3",{attrs:{id:"为什么是-slot-而非-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么是-slot-而非-node"}},[s._v("#")]),s._v(" 为什么是 slot 而非 node")]),s._v(" "),a("p",[s._v("即：为什么 Lua 不能够在同一个 node 的不同 slots 上操作多个 key 呢？")]),s._v(" "),a("p",[s._v("因为，slot 的目的就是为了解耦 Redis 实例与数据的关系的。slot 应该可以在不同分片节点上进行切换以实现负载均衡。如果是分片而非 slot ，那么很有可能，你的代码今天能运行，明天就会爆炸。")]),s._v(" "),a("p",[s._v("有意思的是，在以前的官方文档上，也误使用了 node 而非 slot 表达，因此，在此强调一下。")]),s._v(" "),a("p",[a("img",{attrs:{src:t(345),alt:"image-20240114163115469"}})]),s._v(" "),a("h2",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[s._v("#")]),s._v(" 解决方案")]),s._v(" "),a("h3",{attrs:{id:"_1、hashtags-保证-key-在同一节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、hashtags-保证-key-在同一节点"}},[s._v("#")]),s._v(" 1、HashTags：保证 key 在同一节点")]),s._v(" "),a("p",[s._v("如果键中的{}括号之间有子串，则只对字符串内的内容进行哈希处理，这个子串叫做「哈希标签」。")]),s._v(" "),a("p",[s._v("例如：Redis 保证 "),a("code",[s._v("user:{123}:profile")]),s._v(" 和 "),a("code",[s._v("user:{123}:account")]),s._v(" 会在同一个哈希槽中，因为它们的「哈希标签」是相同的。")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("CLUSTER KEYSLOT")]),s._v(" 命令获取目标Key的哈希槽（Hash Slot）进行确认。")]),s._v(" "),a("h3",{attrs:{id:"_2、考虑数据类型的设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、考虑数据类型的设计"}},[s._v("#")]),s._v(" 2、考虑数据类型的设计")]),s._v(" "),a("p",[s._v("我们可以使用 hashes, lists, or sets 等数据结构来保存有关联的数据，使得 Lua 无需跨 slots 访问数据，一个 Key 即可解决。")]),s._v(" "),a("h3",{attrs:{id:"_3、eval-flags-allow-cross-slot-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、eval-flags-allow-cross-slot-keys"}},[s._v("#")]),s._v(" 3、Eval Flags：allow-cross-slot-keys")]),s._v(" "),a("p",[s._v("Redis 7.0 提供了 "),a("code",[s._v("Eval flags")]),s._v(" 可以告知 Redis 脚本的行为，基本使用如下：")]),s._v(" "),a("div",{staticClass:"language-lua line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!lua flags=no-writes,allow-stale")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'get'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("只要 Redis 发现 "),a("code",[s._v("#!")]),s._v(" ，就会获得一些默认的 lua flags，这和没有 "),a("code",[s._v("#!")]),s._v(" 的 Lua 脚本不同")]),s._v(" "),a("p",[s._v("Redis 默认脚本有如下特性：")]),s._v(" "),a("ol",[a("li",[s._v("既有读操作，又有写操作")]),s._v(" "),a("li",[s._v("可以运行在集群模式下，但不能跨 slots 访问数据")]),s._v(" "),a("li",[s._v("从节点数据可能过时，会被拒绝操作从节点")]),s._v(" "),a("li",[s._v("内存空间小时，会拒绝执行来避免内存溢出")])])]),s._v(" "),a("p",[s._v("利用 Redis 7.0 新特性 Eval flags，允许脚本访问来自不同slots的keys，尽管这种做法是不推荐的。")]),s._v(" "),a("div",{staticClass:"language-lua line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!lua flags=allow-cross-slot-keys")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v(" 允许脚本访问来自不同slots的keys\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_4、考虑不使用集群模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、考虑不使用集群模式"}},[s._v("#")]),s._v(" 4、考虑不使用集群模式")]),s._v(" "),a("p",[s._v("如果集群模式不是必须的，可以考虑不使用集群模式，自然就不会有这样的问题了。")]),s._v(" "),a("h4",{attrs:{id:"参考文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[s._v("#")]),s._v(" 参考文档")]),s._v(" "),a("p",[s._v("《Redis 核心技术与实战》")]),s._v(" "),a("p",[s._v("《Redis 核心原理与实战》")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://redis.io/docs/interact/transactions/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis 官网"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://redis.com/blog/you-dont-need-transaction-rollbacks-in-redis/",target:"_blank",rel:"noopener noreferrer"}},[s._v("You Don’t Need Transaction Rollbacks in Redis"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.dragonflydb.io/error-solutions/crossslot-keys-in-request-dont-hash-to-the-same-slot",target:"_blank",rel:"noopener noreferrer"}},[s._v("Error: crossslot keys in request don't hash to the same slot"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/redis/redis/issues/5118",target:"_blank",rel:"noopener noreferrer"}},[s._v("CROSSSLOT error on single-shard cluster"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);