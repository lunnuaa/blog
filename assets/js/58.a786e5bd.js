(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{380:function(a,t,r){"use strict";r.r(t);var s=r(14),v=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"一、前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[a._v("#")]),a._v(" 一、前言")]),a._v(" "),t("p",[a._v("在这个部分，我会简单介绍各个章节的内容，方便读者各取所需。")]),a._v(" "),t("h3",{attrs:{id:"java并发基础知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java并发基础知识"}},[a._v("#")]),a._v(" Java并发基础知识")]),a._v(" "),t("p",[a._v("本章首先介绍进程与线程的区别，简单认识线程的价值和意义。然后抛出一个问题：如何实现并发编程？指出实现并发编程需要解决的三大问题：可见性，有序性，原子性，再看 Java 是如何实现的并发编程。最后，作为后续文章的铺垫，我们将进一步认识 Java 线程，它的核心字段、创建方式、方法等，使得读者对 Java 线程的基本使用和本质有一个清晰的认知。")]),a._v(" "),t("h3",{attrs:{id:"锁与同步器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁与同步器"}},[a._v("#")]),a._v(" 锁与同步器")]),a._v(" "),t("p",[a._v("本章主要介绍 Java 提供的几个关键字：volatile，synchronized，wait/notify方法。这些关键字的实现都是由 JVM 提供的。这会使得我们对 JMM 有了更深刻的认识。")]),a._v(" "),t("h3",{attrs:{id:"juc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#juc"}},[a._v("#")]),a._v(" JUC")]),a._v(" "),t("p",[a._v("本章主要介绍 Java 语言层面提供的锁机制，JUC 包的核心内容，包括AQS，ReentrantLock，CountDownLatch等等。还会涉及一些提供了线程安全相关保证的数据结构如阻塞队列，ConcurrentHashMap等。本章全部基于源码剖析。")]),a._v(" "),t("h3",{attrs:{id:"线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[a._v("#")]),a._v(" 线程池")]),a._v(" "),t("p",[a._v("本章主要是对线程池 ThreadPoolExecutor 的源码剖析。")]),a._v(" "),t("h3",{attrs:{id:"补充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[a._v("#")]),a._v(" 补充")]),a._v(" "),t("p",[a._v("本章是对 Java 多线程的其他内容的补充，包括 ThreadLocal，final 关键字。")])])}),[],!1,null,null,null);t.default=v.exports}}]);