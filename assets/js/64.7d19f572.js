(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{383:function(a,t,s){"use strict";s.r(t);var n=s(14),r=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"深入理解final关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深入理解final关键字"}},[a._v("#")]),a._v(" 深入理解final关键字")]),a._v(" "),t("h2",{attrs:{id:"final关键字的基本作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final关键字的基本作用"}},[a._v("#")]),a._v(" final关键字的基本作用")]),a._v(" "),t("ul",[t("li",[a._v("final 修饰类，不可被继承")]),a._v(" "),t("li",[a._v("修饰方法，不可被重写")]),a._v(" "),t("li",[a._v("修饰变量，不可被修改；修饰对象，表示对象的指针不可修改")])]),a._v(" "),t("h2",{attrs:{id:"final底层的实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final底层的实现原理"}},[a._v("#")]),a._v(" final底层的实现原理")]),a._v(" "),t("h3",{attrs:{id:"_1、final修饰的字段必须被初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、final修饰的字段必须被初始化"}},[a._v("#")]),a._v(" 1、final修饰的字段必须被初始化")]),a._v(" "),t("h4",{attrs:{id:"声明时初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#声明时初始化"}},[a._v("#")]),a._v(" 声明时初始化")]),a._v(" "),t("p",[a._v("一般在声明时初始化，这是最常见的。")]),a._v(" "),t("p",[a._v("如果在声明时"),t("strong",[a._v("未")]),a._v("初始化，则该变量称为"),t("strong",[a._v("空final变量")]),a._v("。")]),a._v(" "),t("h4",{attrs:{id:"代码块初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码块初始化"}},[a._v("#")]),a._v(" 代码块初始化")]),a._v(" "),t("p",[a._v("静态代码块可以初始化"),t("code",[a._v("static final")]),a._v("修饰的字段")]),a._v(" "),t("h4",{attrs:{id:"构造方法初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造方法初始化"}},[a._v("#")]),a._v(" 构造方法初始化")]),a._v(" "),t("p",[a._v("无法初始化"),t("code",[a._v("static")]),a._v("修饰的字段")]),a._v(" "),t("p",[a._v("因此，类变量（static）有"),t("strong",[a._v("两个时机赋初值")]),a._v("，而实例变量则可以有"),t("strong",[a._v("三个时机赋初值")]),a._v("。")]),a._v(" "),t("h4",{attrs:{id:"局部final初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#局部final初始化"}},[a._v("#")]),a._v(" 局部final初始化")]),a._v(" "),t("p",[a._v("要么声明时赋值，要么首次使用前主动赋值。")]),a._v(" "),t("h3",{attrs:{id:"_2、final重排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、final重排序"}},[a._v("#")]),a._v(" 2、final重排序")]),a._v(" "),t("p",[a._v("基本成员变量：")]),a._v(" "),t("p",[a._v("写：")]),a._v(" "),t("p",[a._v("写final域的重排序规则禁止把final域的写重排序到构造函数之外")]),a._v(" "),t("p",[t("strong",[a._v("可以确保：在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了。")])]),a._v(" "),t("p",[a._v("读：")]),a._v(" "),t("p",[a._v("在一个线程中，初次读对象引用 先于 初次读该对象包含的final域。")]),a._v(" "),t("p",[t("strong",[a._v("可以确保：在读一个对象的final域之前，一定会先读包含这个final域的对象的引用")]),a._v("。")]),a._v(" "),t("blockquote",[t("p",[a._v("这个看似没什么用，因为访问对象的字段，间接依赖于获取对象的引用。")]),a._v(" "),t("p",[a._v("但有少数处理器允许对存在间接依赖关系的操作做重排序")])]),a._v(" "),t("p",[t("strong",[a._v("在构造函数内对一个final引用的对象的成员域的写入，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序")]),a._v("。")]),a._v(" "),t("p",[a._v("可以确保："),t("strong",[a._v("读线程C至少能看到写线程A在构造函数中对final引用对象的成员域的写入")]),a._v("。")]),a._v(" "),t("h2",{attrs:{id:"final的其他特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final的其他特性"}},[a._v("#")]),a._v(" final的其他特性")]),a._v(" "),t("h3",{attrs:{id:"_1、内联加速"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、内联加速"}},[a._v("#")]),a._v(" 1、内联加速")]),a._v(" "),t("p",[t("strong",[a._v("内联")]),a._v("：使用"),t("em",[a._v("final")]),a._v("关键字修饰方法，JVM会显式地主动对方法、变量及类进行内联优化。")]),a._v(" "),t("blockquote",[t("p",[a._v("在java早期实现中，如果将一个方法指明为final，就是同意编译器将针对该方法的调用都转化为内嵌调用（内联）。大概就是，如果是内嵌调用，虚拟机不再执行正常的方法调用（参数压栈，跳转到方法处执行，再调回，处理栈参数，处理返回值），而是直接将方法展开，以方法体中的实际代码替代原来的方法调用。这样减少了方法调用的开销。")])]),a._v(" "),t("p",[a._v("类的"),t("em",[a._v("private")]),a._v("方法会隐式地被指定为"),t("em",[a._v("final")]),a._v("方法，也就同样无法被重写。可以对private方法添加final修饰符，但并没有添加任何额外意义。")]),a._v(" "),t("h3",{attrs:{id:"_2、天生线程安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、天生线程安全"}},[a._v("#")]),a._v(" 2、天生线程安全")]),a._v(" "),t("p",[a._v("final是只读的，自然不会有线程安全问题。")]),a._v(" "),t("h3",{attrs:{id:"_3、final与lambda"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、final与lambda"}},[a._v("#")]),a._v(" 3、final与lambda")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ❌ 不允许对a修改")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("foreach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Math")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("这是不允许的，因为lambda是capture-by-value，即只能捕获值，做法是把外部的a拷贝一份到内部。因此对a的修改是对局部变量的修改，不影响外部的a的值。")]),a._v(" "),t("h5",{attrs:{id:"闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[a._v("#")]),a._v(" 闭包")]),a._v(" "),t("p",[a._v("一个函数的“自由变量”就是既不是参数也不是局部变量的变量。")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.iteye.com/blog/rednaxelafx-245022",target:"_blank",rel:"noopener noreferrer"}},[a._v("闭包（R大的解释）"),t("OutboundLink")],1),a._v("的要素：")]),a._v(" "),t("p",[a._v("1、一个含有自由变量的函数； 2、这些自由变量所在的环境。 可以是类，可以是方法")]),a._v(" "),t("p",[a._v("外部环境持有内部函数所使用的自由变量，对内部函数形成“闭包”。")]),a._v(" "),t("p",[t("strong",[a._v("一个含有自由变量的函数要正确执行，必须保证其所依赖s的外围环境的存在。")])]),a._v(" "),t("h5",{attrs:{id:"最简单的闭包实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最简单的闭包实例"}},[a._v("#")]),a._v(" 最简单的闭包实例")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 自由变量x")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AddWith")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" y "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("  \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("  \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("AddWith必须依附于Foo的一个实例，这不就是闭包么，很好理解。当然严格来说方法所捕获的自由变量不是i，而是this；x是通过this来访问到的，完整写出应该是this.x。")]),a._v(" "),t("blockquote",[t("p",[a._v("但是面向对象的语言里一般不把类称为闭包，没为什么，就是种习惯。")])]),a._v(" "),t("p",[a._v("全局变量是一种特殊的自由变量。")]),a._v(" "),t("p",[a._v("上述例子，外围环境是类Foo，但若外围环境来自一个外围函数，并且内部函数可以作为返回值返回，那么"),t("strong",[a._v("外围函数的局部环境就不能在调用结束时就撤销。也就是说不能在栈上分配空间")]),a._v("。")]),a._v(" "),t("p",[t("a",{attrs:{href:"http://www.zhihu.com/question/27416568/answer/36565794",target:"_blank",rel:"noopener noreferrer"}},[a._v("R大的解释"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("如果变量（variable）是不可变（immutable）的，那么使用者无法感知值捕获和引用捕获的区别。")]),a._v(" "),t("p",[t("strong",[a._v("Java 8允许捕获事实上不变量")]),a._v("（effectively final local）")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 像这就是允许的，即使b没有被final修饰，但lambda内部不会对b修改")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//  System.out.println(b++); 这样 编译器会直接报错")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("一种摆脱这种限制的方法是用"),t("strong",[a._v("数组")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("因为指向数组的指针没变，只是内部变化，而内部属性不在栈内，因此是允许的。")]),a._v(" "),t("h3",{attrs:{id:"_4、宏变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、宏变量"}},[a._v("#")]),a._v(" 4、宏变量")]),a._v(" "),t("p",[a._v("一个宏变量需要同时满足以下三个条件：")]),a._v(" "),t("ul",[t("li",[a._v("1）被final修饰符修饰")]),a._v(" "),t("li",[a._v("2）在定义该final变量时就指定了初始值")]),a._v(" "),t("li",[a._v("3）该初始值在编译时就能够唯一指定")])]),a._v(" "),t("h5",{attrs:{id:"宏替换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏替换"}},[a._v("#")]),a._v(" 宏替换")]),a._v(" "),t("p",[a._v("如果一个变量是"),t("strong",[a._v("宏变量")]),a._v("，那么编译器会把"),t("strong",[a._v("程序所有用到该变量的地方直接替换成该变量的值")]),a._v("，这就是"),t("strong",[a._v("宏替换")]),a._v("。可以看这个例子，牵扯到String：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 被比较的字符串")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" hw1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" hong "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//宏变量，值为hello")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" hw2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" hong "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 常量拼接 而非builder")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("hw1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" hw2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//true")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("h2",{attrs:{id:"final小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final小结"}},[a._v("#")]),a._v(" final小结")]),a._v(" "),t("ol",[t("li",[a._v("final修饰字段/类/方法，三个作用")]),a._v(" "),t("li",[a._v("final初始化的方式，三种，局部final另说")]),a._v(" "),t("li",[a._v("final原理，重排序")]),a._v(" "),t("li",[a._v("final特性，包括只读线程安全，内联(private方法自带final)加速")]),a._v(" "),t("li",[a._v("与lambda的关系")]),a._v(" "),t("li",[a._v("宏变量自动替换成常量")])]),a._v(" "),t("h4",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[a._v("#")]),a._v(" 参考文档")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.zhihu.com/question/27416568/answer/36565794",target:"_blank",rel:"noopener noreferrer"}},[a._v("JVM的规范中允许编程语言语义中创建闭包(closure)吗？ - RednaxelaFX的回答"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);